#!/usr/bin/env ruby
# frozen_string_literal: true

Signal.trap('INT') { exit 1 }
$LOAD_PATH.unshift File.join(File.dirname(__FILE__), %w[.. lib])

require 'rubygems'

require 'thor'
require 'thor/group'


require 'toolbox/helper'

module Toolbox
  module Templatize

    class Create < Thor::Group
      include Thor::Actions
      include Toolbox::Helper

      namespace :create

      argument :toolname,
                type: :string,
                required: true

      class << self
        def source_root
          File.join(Toolbox.source_root, 'resources/toolbox/skel')
        end
      end

      def create_files
        template('bin/name.erb', "#{target_path}/bin/tools/#{snake_name}", template_options)
        File.chmod(0o755, "#{target_path}/bin/tools/#{snake_name}")
      end  

#      def example_create_files
#
#        template('bin/name.erb', "#{target_path}/bin/#{snake_name}", template_options)
#        File.chmod(0o755, "#{target_path}/bin/#{snake_name}")
#
#        template('lib/name.rb.erb', "#{target_path}/lib/#{snake_name}.rb", template_options)
#        template('lib/helper.rb.erb', "#{target_path}/lib/#{snake_name}/helper.rb", template_options)
#        template('lib/cli.rb.erb', "#{target_path}/lib/#{snake_name}/cli.rb", template_options)
#        template('lib/cli/command.rb.erb', "#{target_path}/lib/#{snake_name}/cli/command.rb", template_options)
#
#        template('spec/spec_helper.rb.erb', "#{target_path}/spec/spec_helper.rb", template_options)
#        template('spec/sample_spec.rb.erb', "#{target_path}/spec/sample_spec.rb", template_options)
#        template('spec/cli/command_spec.rb.erb', "#{target_path}/spec/cli/command_spec.rb", template_options)
#
#        wrap_copy_file('spec/resources/sample.erb')
#        wrap_copy_file('.gitignore')
#        wrap_copy_file('rubocop.yml')
#        wrap_copy_file('Rakefile')
#
#
#        create_file("#{target_path}/.rubocop_todo.yml")
#      end

      private

      def wrap_copy_file(path)
        copy_file("#{Toolbox.source_root}/#{path}","#{target_path}/#{path}")
      end

      def target_path
        @target_path ||= Toolbox.source_root
      end

      def template_options
        @template_options ||= { name: toolname }
      end

      def resource_path(*args)
        Toolbox.source_root.join('resources/toolbox/skel', *args).to_s
      end

      def name_components
        @_name_components ||= toolname.scan(/[\w_]+/)[0].split(/_/)
      end

      def snake_name
        @_snake_name ||= name_components.map(&:downcase).join('_')
      end

      def camel_name
        @_camel_name ||= name_components.map(&:capitalize).join('')
      end

    end

  end  

  class CLI < Thor
    def self.exit_on_failure?
      true
    end
    register(Templatize::Create, 'create', 'create <toolname>', 'Initialize new tool')
  end  

end  







Toolbox::CLI.start(ARGV)
